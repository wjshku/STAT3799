---
title: "Simulation3"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r}
simu <- function(multi, n, m, sigmax = 5, sigmaep = 1){

    X <- runif(n*multi,0,4*pi)
    Y <- mx(X) + rnorm(n, sd = sigmaep)

  return(data.frame(X, Y))
}

nw_simu <- function(data, rounds, testd, n, h, k){
  
    esti_nw <- testd$Y
    esti <- data.frame()
    X <- data$X
    Y <- data$Y
    real <- testd$Y
    test <- testd$X
    
    for(j in 1:length(test)){
    #set.seed(i) # random, may exist better solutions
        esti_nw[j] <- mhat(n,h,test[j],X,Y,k)
    }
    
    MSE_NW <- mean((real - esti_nw)^2)
    #browser()

    esti <- rbind(esti,data.frame(X = test,esti_nw))

  return(list(MSE = MSE_NW, esti = esti))
  
}

#Self-Supervised
ss_simu <- function(data, data_un, rounds, testd, n, h, m, g, k){
  esti <- data.frame()
    esti_ss <- testd$Y

    X <- data$X
    Y <- data$Y
    Xu <- data_un$X
    
    test <- testd$X
    real <- testd$Y
    
    for(j in 1:length(test)){
    #set.seed(i) # random, may exist better solutions
        esti_ss[j] <- rhat(n,h,test[j],X,Y,k,m,g,Xu)
    }
    
    MSE_SS <- mean((real - esti_ss)^2)
    #browser()

    esti <- rbind(esti,data.frame(X = test,esti_ss))
  
  
  return(list(MSE = MSE_SS, esti = esti))
  
}

hy_simu <- function(rounds, testd, lambda, esti_nw, esti_ss){
  
  esti <- data_frame()
  
  real <- testd$Y
  
  esti_hy <- lambda * esti_nw + (1-lambda) * esti_ss
  
  esti <- rbind(esti,data.frame(X = testd$X ,esti_ss))
  
  MSE_HY <- mean((real - esti_hy)^2)

  return(list(MSE = MSE_HY, esti = esti))
}
```

```{r}
data <- simu(2, para$n*2, para$m, sigmax = sigmax, sigmaep = sigmaep)
set.seed(101) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data  
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train_label <- data[sample[1:para$n],]
train_un <- data[sample[(1+para$n):(para$m+para$n)],]
test  <- data[-sample, ]
```

Grid search for bandwidth
```{r}
  para <- paraset3(64,10/19,sigmaep,rk$value, muk$value,theta22$value)
  
  test <- seq(0,4*pi,length.out = 32)
  rounds <- 30
  
  set.seed(10)
  
  ratioh <- seq(0.2,2,0.2)
  result_nw <- data.frame()
  for(i in 1:length(ratioh)){
    h <- ratioh[i]*para$h
    for(k in 1:rounds){
      MSE_NW <- nw_simu(train_label, rounds, test, para$n,h, k)$MSE
      
    }
    result_nw <- rbind(result_nw, data.frame(MSE_NW, h))
  }
  
result_nw
plot(mMSE_NW~h,data = result_nw,main = "Average MSE_NW")
min(result_nw$MSE_NW)
  
  ratioh <- seq(0.5,2.5,0.5)
  ratiog <- seq(0.5,1.5,0.2)
  result_ss <- data.frame()
  for(i in 1:length(ratioh)){
    for(j in 1:length(ratiog)){
    h <- ratioh[i]*para$h
    g <- ratiog[j]*para$g
    MSE_SS <- ss_simu(train_label, train_un, rounds, test, para$n,h, para$m,g, k)$MSE
    result_ss <- rbind(result_ss, data.frame(mMSE_SS, h, g))
  }
  }
  
result_ss
min(result_ss$mMSE_SS)
plot(mMSE_SS~h,data = filter(result_ss, g == result_ss$g[1]),main = "g = 1")
plot(mMSE_SS~g,data = filter(result_ss, h == result_ss$h[1]),main = "h = 1")
```

Bandwidth Search for Hybrid Estimator
```{r}
ratioh <- seq(0.5,2.5,0.5)
ratiog <- seq(0.5,2.5,0.2)

result_hy <- data.frame()
  for(i in 1:length(ratioh)){
  for(j in 1:length(ratiog)){
    h <- ratioh[i]*para$h
    g <- ratiog[j]*para$g
    para$lambda <- 1 + h^2/g^2
    nw_res <- nw_simu(train_label, rounds, test, para$n,h, k)
    ss_res <- ss_simu(train_label, train_un, rounds, test, para$n,h, para$m,g, k)
    
    hy_res <- hy_simu(rounds, test, para$lambda, nw_res$esti$esti_nw, ss_res$esti$esti_ss)
    
    result_hy <- rbind(result_hy, data.frame(MSE_HY = hy_res$MSE, h, g))
  }
  }

result_hy
min(result_hy$MSE_HY)
match(min(result_hy$MSE_HY),result_hy$MSE_HY)
plot(mMSE_HY~h,data = filter(result_hy, g == result_hy$g[32]),main = "g = 0.87")
plot(mMSE_HY~g,data = filter(result_hy, h == result_hy$h[4]),main = "h = 0.42")


```

Repeat experiment for numerous times
```{r}
set.seed(100)
rounds <- 10



ratioh <- seq(0.5,2.5,0.5)
ratiog <- seq(0.5,4,0.5)

mMSE_NW <- 0
mMSE_HY <- 0
for(exp in 1:rounds){
  sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
  train_label <- data[sample[1:para$n],]
  train_un <- data[sample[(1+para$n):(para$m+para$n)],]
  test  <- data[-sample, ]
  result_nw <- data.frame()
  for(i in 1:length(ratioh)){
    h <- ratioh[i]*para$h
    MSE_NW <- nw_simu(train_label, rounds, test, para$n,h, k)$MSE

    result_nw <- rbind(result_nw, data.frame(mMSE_NW = MSE_NW, h))
  }
  mMSE_NW <- mMSE_NW + result_nw$mMSE_NW
  
  result_hy <- data.frame()
  for(i in 1:length(ratioh)){
  for(j in 1:length(ratiog)){
    h <- ratioh[i]*para$h
    g <- ratiog[j]*para$g
    para$lambda <- 1 + h^2/g^2
    nw_res <- nw_simu(train_label, rounds, test, para$n,h, k)
    ss_res <- ss_simu(train_label, train_un, rounds, test, para$n,h, para$m,g, k)
    
    hy_res <- hy_simu(rounds, test, para$lambda, nw_res$esti$esti_nw, ss_res$esti$esti_ss)
    
    result_hy <- rbind(result_hy, data.frame(mMSE_HY = hy_res$MSE, h, g))
  }
  }
  mMSE_HY <- mMSE_HY + result_hy$mMSE_HY
}
result_nw$mMSE_NW <- mMSE_NW/rounds
result_hy$mMSE_HY <- mMSE_HY/rounds

min(result_nw$mMSE_NW)
min(result_hy$mMSE_HY)

match(min(result_nw$mMSE_NW),result_nw$mMSE_NW)
match(min(result_hy$mMSE_HY),result_hy$mMSE_HY)

```
```{r}
plot(mMSE_HY~h,data = filter(result_hy, g == result_hy$g[32]),main = "g = 2.17")
lines(mMSE_HY~h,data = filter(result_hy, g == result_hy$g[32]),col = "red")
lines(mMSE_NW~h,data = result_nw,col = "blue")
legend("topleft",col=c("blue","red"),cex = 0.5,legend=c("MSE_NW","MSE_HY"))

plot(mMSE_HY~h,data = filter(result_hy, g == result_hy$g[32]), type="b", pch=19, col="red", xlab="h", ylab="MSE",main = "g = 2.17")
# Add a line
lines(mMSE_NW~h,data = result_nw, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend("topright", legend=c("MSE_HY", "MSE_NW"),col=c("red", "blue"), lty=1:2, cex=0.8)
```
