library(Deriv)
library(ggplot2)
library(hrbrthemes)
library(caret)
library(tidyverse)
library(Deriv)
library(ggplot2)
library(hrbrthemes)
library(caret)
hlist <- seq(0.1,1,0.1)
glist <- seq(0.3,4,0.3)
rounds <- 1
coverage <- data.frame()
result_ci <- data.frame()
for(i in 1:length(hlist)){
for(j in 1:length(glist)){
coverage <- data.frame()
set.seed(10)
for(exp in 1:rounds){
train_label <- labeled
train_un <- unlabeled
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
para$h <- hlist[i]
para$g <- glist[j]
sigmaep_esti <- sqrt(esti_error(para,train_label))
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep_esti,rk$value,sigmak$value))
}
cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
cover_prop <- mean(cover,na.rm = T)
result_ci <- rbind(result_ci, data.frame(h = para$h, g = para$g, cover_prop, sd = sqrt(mean(coverage$sd^2))))
}
}
train_label <- labeled
train_un <- unlabeled
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
train_label$Y
labeled
labeled <- nw_simu(data[1:para$n,],data[1:para$n,],para$n,para$h,k)$esti
labeled
labeled <- nw_simu(data[1:para$n,],data[1:para$n,],para$n,para$h,k)$esti
names(labeled) <- c("X","Y")
error <- labeled$Y - data[1:para$n,]$Y
error <- error - mean(error)
train_un <- data[(1+para$n):(para$n+para$m),]
train_un
train_label <- labeled
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
hlist <- seq(0.1,1,0.1)
glist <- seq(0.3,4,0.3)
rounds <- 1
coverage <- data.frame()
result_ci <- data.frame()
for(i in 1:length(hlist)){
for(j in 1:length(glist)){
coverage <- data.frame()
set.seed(10)
for(exp in 1:rounds){
train_label <- labeled
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
para$h <- hlist[i]
para$g <- glist[j]
sigmaep_esti <- sqrt(esti_error(para,train_label))
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep_esti,rk$value,sigmak$value))
}
cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
cover_prop <- mean(cover,na.rm = T)
result_ci <- rbind(result_ci, data.frame(h = para$h, g = para$g, cover_prop, sd = sqrt(mean(coverage$sd^2))))
}
}
test
set.seed(30)
para <- paraset_g(32,10/19,rk$value, muk$value)
data <- simu_norm(para$n + para$m, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
para$h <- (8*pi^(1/2)/3)^(1/5)*sd(data$X)*(rk$value/muk$value^2/para$n)^(1/5)
para$g <- (8*pi^(1/2)/3)^(1/5)*sd(data$X)*(rk$value/muk$value^2/para$m)^(1/5)
test <- data.frame(X = 1.5,Y = mx(1.5))
labeled <- nw_simu(data[1:para$n,],data[1:para$n,],para$n,para$h,k)$esti
names(labeled) <- c("X","Y")
error <- labeled$Y - data[1:para$n,]$Y
error <- error - mean(error)
train_un <- data[(1+para$n):(para$n+para$m),]
hist(error)
hlist <- seq(0.1,1,0.1)
glist <- seq(0.3,4,0.3)
rounds <- 100
coverage <- data.frame()
result_ci <- data.frame()
for(i in 1:length(hlist)){
for(j in 1:length(glist)){
coverage <- data.frame()
set.seed(10)
for(exp in 1:rounds){
train_label <- labeled
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
para$h <- hlist[i]
para$g <- glist[j]
sigmaep_esti <- sqrt(esti_error(para,train_label))
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep_esti,rk$value,sigmak$value))
}
cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
cover_prop <- mean(cover,na.rm = T)
result_ci <- rbind(result_ci, data.frame(h = para$h, g = para$g, cover_prop, sd = sqrt(mean(coverage$sd^2))))
}
}
result_ci$true_cover <- coverage_all$cover
result_ci$true_cover <- coverage_all$cover
para
para <- paraset_g(32,10/19,rk$value, muk$value)
test <- data.frame(X = 1.5, Y = mx(1.5))
rounds <- 100
hlist <- seq(0.1,1,0.1)
glist <- seq(0.3,4,0.3)
mMSE_NW <- 0
mMSE_HY <- 0
set.seed(10)
record_nw <- matrix(nrow = length(hlist), ncol = rounds)
record_hy <- matrix(nrow = length(hlist)*length(glist), ncol = rounds)
for(exp in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
#test <- data[-sample,]
#test <- data.frame(X = 2, Y = mx(2))
result_nw <- data.frame()
for(i in 1:length(hlist)){
h <- hlist[i]
MSE_NW <- nw_simu(train_label, test, para$n,h, k)$MSE
result_nw <- rbind(result_nw, data.frame(mMSE_NW = MSE_NW, h))
}
record_nw[,exp] <- result_nw$mMSE_NW #
mMSE_NW <- mMSE_NW + result_nw$mMSE_NW
result_hy <- data.frame()
for(i in 1:length(hlist)){
for(j in 1:length(glist)){
h <- hlist[i]
g <- glist[j]
para$lambda <- 1 + h^2/g^2
nw_res <- nw_simu(train_label, test, para$n,h, k)
ss_res <- ss_simu(train_label, train_un, test, para$n,h, para$m,g, k)
hy_res <- hy_simu(test, para$lambda, nw_res$esti$esti_nw, ss_res$esti$esti_ss)
result_hy <- rbind(result_hy, data.frame(mMSE_HY = hy_res$MSE, h, g))
}
}
record_hy[,exp] <- result_hy$mMSE_HY
mMSE_HY <- mMSE_HY + result_hy$mMSE_HY
}
result_nw$mMSE_NW <- mMSE_NW/rounds
result_hy$mMSE_HY <- mMSE_HY/rounds
min(result_nw$mMSE_NW,na.rm = TRUE)
min(result_hy$mMSE_HY,na.rm = TRUE)
NW_opt <- match(min(result_nw$mMSE_NW,na.rm = TRUE),result_nw$mMSE_NW)
HY_opt <-match(min(result_hy$mMSE_HY,na.rm = TRUE),result_hy$mMSE_HY)
plot(mMSE_NW~h,data = result_nw,col = "blue",main = str_c("h = ",result_nw$h[NW_opt]))
g_main <- str_c("g = ",result_hy$g[HY_opt])
h_main <- str_c("h = ",result_hy$h[HY_opt])
plot(mMSE_HY~h,type = "b",data = filter(result_hy, g == result_hy$g[HY_opt]),main = g_main)
plot(mMSE_HY~g,type = "b",data = filter(result_hy, h == result_hy$h[HY_opt]),main = h_main)
plot(mMSE_HY~g,type = "b",data = filter(result_hy, h == result_hy$h[HY_opt])[-1,],main = h_main)
test
set.seed(10)
rounds <- 100
para$h <- 0.4 # result_hy$h[HY_opt]
para$g <- 1.2 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
test
test$X
test$X <-2
test$Y <-4
test
set.seed(30)
para <- paraset_g(64,10/19,rk$value, muk$value)
data <- simu_norm(para$n + para$m, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
para$h <- (8*pi^(1/2)/3)^(1/5)*sd(data$X)*(rk$value/muk$value^2/para$n)^(1/5)
para$g <- (8*pi^(1/2)/3)^(1/5)*sd(data$X)*(rk$value/muk$value^2/para$m)^(1/5)
test <- data.frame(X = 1.5,Y = mx(1.5))
set.seed(30)
para <- paraset_g(64,10/19,rk$value, muk$value)
data <- simu_norm(para$n + para$m, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
para$h <- (8*pi^(1/2)/3)^(1/5)*sd(data$X)*(rk$value/muk$value^2/para$n)^(1/5)
para$g <- (8*pi^(1/2)/3)^(1/5)*sd(data$X)*(rk$value/muk$value^2/para$m)^(1/5)
test <- data.frame(X = 2,Y = mx(2))
labeled <- nw_simu(data[1:para$n,],data[1:para$n,],para$n,para$h,k)$esti
names(labeled) <- c("X","Y")
error <- labeled$Y - data[1:para$n,]$Y
error <- error - mean(error)
train_un <- data[(1+para$n):(para$n+para$m),]
train_label <- labeled[sample(1:nrow(labeled), para$n,replace = T),]
train_un <- unlabeled[sample(1:nrow(unlabeled), para$m,replace = T),]
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
esti <- nw_simu(train_label,train_label,para$n,para$h,k)$esti
plot(train_label$X,train_label$Y)
points(data$X,data$X^2,col = "red")
points(esti$X,esti$esti_nw,col = "blue")
hlist <- seq(0.1,1,0.1)
glist <- seq(0.3,4,0.3)
rounds <- 100
coverage <- data.frame()
result_ci <- data.frame()
for(i in 1:length(hlist)){
for(j in 1:length(glist)){
coverage <- data.frame()
set.seed(10)
for(exp in 1:rounds){
train_label <- labeled
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
para$h <- hlist[i]
para$g <- glist[j]
sigmaep_esti <- sqrt(esti_error(para,train_label))
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep_esti,rk$value,sigmak$value))
}
cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
cover_prop <- mean(cover,na.rm = T)
result_ci <- rbind(result_ci, data.frame(h = para$h, g = para$g, cover_prop, sd = sqrt(mean(coverage$sd^2))))
}
}
para
set.seed(10)
rounds <- 100
para$h <- 0.3 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
0.9*(0.5-0.3)/(0.6-0.3)+0.72*(0.6-0.5)/(0.6-0.3)
plot(result_ci$g,result_ci$cover_prop)
0.9*(0.1)/(0.6-0.3)+0.72*(0.5-0.3)/(0.6-0.3)
set.seed(10)
rounds <- 100
para$h <- 0.1 # result_hy$h[HY_opt]
para$g <- 0.6 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 0.3 # result_hy$h[HY_opt]
para$g <- 0.6 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 0.3 # result_hy$h[HY_opt]
para$g <- 1.2 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 0.3 # result_hy$h[HY_opt]
para$g <- 3.3 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
para
View(CI)
set.seed(10)
rounds <- 100
para$h <- 1 # result_hy$h[HY_opt]
para$g <- 1 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 1 # result_hy$h[HY_opt]
para$g <- 0.6 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 1 # result_hy$h[HY_opt]
para$g <- 0.3 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
simulation <- 1:rounds
test_label <- str_c("n = ", para$n)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = test$Y)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)+
labs(title="Plot of CI over 100 simulations",
x =test_label, y = "Estimation")+
theme(
plot.title = element_text(size=14,hjust = 0.5)
)
set.seed(10)
rounds <- 100
para$h <- 1 # result_hy$h[HY_opt]
para$g <- 1 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
simulation <- 1:rounds
test_label <- str_c("n = ", para$n)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = test$Y)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)+
labs(title="Plot of CI over 100 simulations",
x =test_label, y = "Estimation")+
theme(
plot.title = element_text(size=14,hjust = 0.5)
)
test
set.seed(10)
rounds <- 100
para$h <- 1 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
simulation <- 1:rounds
test_label <- str_c("n = ", para$n)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = test$Y)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)+
labs(title="Plot of CI over 100 simulations",
x =test_label, y = "Estimation")+
theme(
plot.title = element_text(size=14,hjust = 0.5)
)
result_ci$true_cover <- coverage_all$cover
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Deriv)
library(ggplot2)
library(hrbrthemes)
library(caret)
alpha <- function(n, h, x, X, Y, k){
temp <- 0
for(i in 1:length(X)){
temp <- temp + Y[i] * k((x - X[i])/h)/(n*h)
}
return(temp)
}
valpha <- Vectorize(alpha,SIMPLIFY = FALSE)
phat<- function(n, h, x, X, k){
temp <- sum(k((x - X)/h)/(n*h))
return(max(temp,0.001)) #this is to prevent the estimation from resulting in NA
}
vphat<- Vectorize(phat)
mhat <- function(n, h, x, X, Y, k){
return(alpha(n,h,x,X,Y,k)/phat(n,h,x,X,k))
}
vmhat <- function(n, h, x, X, Y, k){
return(valpha(n,h,x,X,Y,k)/vphat(n,h,x,X,k))
}
beta <- function(n, h, x, X, Y, k, m, g, Xu){
Yu <- 1:length(Xu)
for(i in 1:length(Xu)){
Yu[i] <- mhat(n, h, Xu[i], X, Y, k)
}
return(alpha(m,g,x,Xu,Yu,k))
}
rhat <- function(n, h, x, X, Y, k, m, g, Xu){
return(beta(n, h, x, X, Y, k, m, g, Xu)/phat(m,g,x,Xu,k))
}
simu_unif <- function(multi, n, xmax, sigmaep = 1){
X <- runif(n*multi,xmax)
Y <- mx(X) + rnorm(n*multi, sd = sigmaep)
return(data.frame(X, Y))
}
simu_norm <- function(multi, n, meanx, sigmax, sigmaep = 1){
X <- rnorm(n*multi,mean = meanx,sd = sigmax)
Y <- mx(X) + rnorm(n*multi, sd = sigmaep)
return(data.frame(X, Y))
}
nw_simu <- function(data, testd, n, h, k){
esti_nw <- testd$Y
esti <- data.frame()
X <- data$X
Y <- data$Y
real <- testd$Y
test <- testd$X
for(j in 1:length(test)){
#set.seed(i) # random, may exist better solutions
esti_nw[j] <- mhat(n,h,test[j],X,Y,k)
}
MSE_NW <- mean((real - esti_nw)^2)
#browser()
esti <- rbind(esti,data.frame(X = test,esti_nw))
return(list(MSE = MSE_NW, esti = esti))
}
#Self-Supervised
ss_simu <- function(data, data_un, testd, n, h, m, g, k){
esti <- data.frame()
esti_ss <- testd$Y
X <- data$X
Y <- data$Y
Xu <- data_un$X
test <- testd$X
real <- testd$Y
for(j in 1:length(test)){
#set.seed(i) # random, may exist better solutions
esti_ss[j] <- rhat(n,h,test[j],X,Y,k,m,g,Xu)
}
MSE_SS <- mean((real - esti_ss)^2)
#browser()
esti <- rbind(esti,data.frame(X = test,esti_ss))
return(list(MSE = MSE_SS, esti = esti))
}
hy_simu <- function(testd, lambda, esti_nw, esti_ss){
esti <- data.frame()
real <- testd$Y
esti_hy <- lambda * esti_nw + (1-lambda) * esti_ss
esti <- rbind(esti,data.frame(X = testd$X ,esti_hy))
MSE_HY <- mean((real - esti_hy)^2)
return(list(MSE = MSE_HY, esti = esti))
}
data <- simu(2, para$n*2, para$m, sigmax = sigmax, sigmaep = sigmaep)
#result_ci$true_cover <- coverage_all$cover
result_ci$error <- abs(result_ci$cover_prop - 0.95)
heatmap4 <- ggplot(result_ci, aes(h, g, fill = error))
heatmap4 + geom_tile()
hlist <- seq(0.1,1,0.1)
glist <- seq(0.3,4,0.3)
rounds <- 250
coverage <- data.frame()
result_ci <- data.frame()
for(i in 1:length(hlist)){
for(j in 1:length(glist)){
coverage <- data.frame()
set.seed(10)
for(exp in 1:rounds){
train_label <- labeled
train_label$Y <- train_label$Y + error[sample(1:length(error), para$n,replace = T)]
para$h <- hlist[i]
para$g <- glist[j]
sigmaep_esti <- sqrt(esti_error(para,train_label))
coverage <- rbind(coverage,CI(adjust = 1,0.95,para,train_label,train_un,test,sigmaep_esti,rk$value,sigmak$value))
}
cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
cover_prop <- mean(cover,na.rm = T)
result_ci <- rbind(result_ci, data.frame(h = para$h, g = para$g, cover_prop, sd = sqrt(mean(coverage$sd^2))))
}
}
#result_ci$true_cover <- coverage_all$cover
result_ci$error <- abs(result_ci$cover_prop - 0.95)
heatmap4 <- ggplot(result_ci, aes(h, g, fill = error))
heatmap4 + geom_tile()
