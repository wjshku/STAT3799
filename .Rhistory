train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(9)
rounds <- 100
para$h <- 0.1 # result_hy$h[HY_opt]
para$g <- 0.3 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = 4)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)
para <- paraset_g(128,10/19,rk$value, muk$value)
set.seed(9)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(7)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(11)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
set.seed(11)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(12)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
set.seed(12)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
set.seed(10)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = 4)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)
knitr::opts_chunk$set(echo = TRUE)
rolling_mean_nw <- record_nw
for (i in 2:ncol(record_nw)){
rolling_mean_nw[,i] <- rowMeans(record_nw[,1:i])
}
plot(rolling_mean_nw[1,])
plot(rolling_mean_nw[1,])
lines(rolling_mean_nw[2,])
lines(rolling_mean_nw[3,])
lines(rolling_mean_nw[4,])
lines(rolling_mean_nw[5,])
plot(rolling_mean_hy[HY_opt,],pch = 3, cex = 0.5)
lines(rolling_mean_hy[26,])
lines(rolling_mean_hy[27,])
lines(rolling_mean_hy[28,])
lines(rolling_mean_hy[21,])
rolling_mean_hy <- record_hy
for (i in 2:ncol(record_hy)){
rolling_mean_hy[,i] <- rowMeans(record_hy[,1:i])
}
plot(rolling_mean_hy[HY_opt,],pch = 3, cex = 0.5)
lines(rolling_mean_hy[26,])
lines(rolling_mean_hy[27,])
lines(rolling_mean_hy[28,])
lines(rolling_mean_hy[21,])
View(rolling_mean_hy)
View(rolling_mean_nw)
?geom_hex
library(tidyverse)
library(Deriv)
library(ggplot2)
library(tidyverse)
library(Deriv)
library(ggplot2)
?geom_hex
View(result_hy)
h <- ggplot(result_hy, aes(h, g))
h + geom_hex(fill = mMSE_HY)
h <- ggplot(result_hy, aes(h, g))
h + geom_hex(alpha = mMSE_HY)
h <- ggplot(result_hy, aes(h, g))
h + geom_hex(color = mMSE_HY)
h <- ggplot(result_hy, aes(h, g))
h + geom_hex(colour = mMSE_HY)
h <- ggplot(result_hy, aes(h, g))
h + geom_hex(colour = mMSE_HY)
h <- ggplot(result_hy, aes(h, g))
h + geom_bin2d(colour = mMSE_HY)
h <- ggplot(result_hy, aes(h, g,colour = mMSE_HY))
h + geom_bin2d()
h <- ggplot(result_hy, aes(h, g,colour = mMSE_HY))
h + geom_point()
h <- ggplot(result_hy, aes(h, g,colour = mMSE_HY))
h + geom_point(size = 5)
h <- ggplot(result_hy, aes(h, g))
h + geom_tile(fill = mMSE_HY)
h <- ggplot(result_hy, aes(h, g,fill = mMSE_HY))
h + geom_tile()
h <- ggplot(result_hy, aes(h, g,fill = mMSE_HY))
h + geom_tile()+
scale_fill_gradient(low="white", high="blue") +
theme_ipsum()
library(hrbrthemes)
install.packages(hrbrthemes)
install.packages("hrbrthemes")
library(tidyverse)
library(Deriv)
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(Deriv)
library(ggplot2)
library(hrbrthemes)
h <- ggplot(result_hy, aes(h, g,fill = mMSE_HY))
h + geom_tile()+
scale_fill_gradient(low="white", high="blue") +
theme_ipsum()
h <- ggplot(result_hy, aes(h, g,fill = mMSE_HY))
h + geom_tile()+
scale_fill_gradient(low="blue", high="white") +
theme_ipsum()
cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20)))
cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))))
result_hy$group <- cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))))
h <- ggplot(result_hy, aes(h, g,fill = mMSE_HY))
h + geom_tile()+
scale_fill_manual(breaks = levels(result_hy$group),
values = c("#86ebc9", "#869ceb",
"#b986eb","#a1eb86",#09855c))
result_hy$group <- cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))))
h <- ggplot(result_hy, aes(h, g,fill = mMSE_HY))
h + geom_tile()+
scale_fill_manual(breaks = levels(result_hy$group),
values = c("#86ebc9", "#869ceb",
"#b986eb","#a1eb86","#09855c"))
result_hy$group <- cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))))
h <- ggplot(result_hy, aes(h, g,fill = group))
h + geom_tile()+
scale_fill_manual(breaks = levels(result_hy$group),
values = c("#86ebc9", "#869ceb",
"#b986eb","#a1eb86","#09855c"))
cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))))
result_hy$mMSE_HY[35]
quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20)
)
quantile(result_hy$mMSE_HY, probs = seq(0.2, 1, by = 0.20))
cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0.2, 1, by = 0.20))))
cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))),include.lowest = T)
result_hy$group <- cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))),include.lowest = T)
h <- ggplot(result_hy, aes(h, g,fill = group))
h + geom_tile()+
scale_fill_manual(breaks = levels(result_hy$group),
values = c("#86ebc9", "#869ceb",
"#b986eb","#a1eb86","#09855c"))
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = 4)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)
plot(coverage$lower, xlab = "Combinations", ylab = "Estimates",col="red", ylim = c(0,10))
points(coverage$upper, col = "blue")
lines(coverage$esti, lty = 2)
abline(h = 4, col = "black")
legend("topright", legend=c("upper bound","lower bound"),col=c("blue","red"), pch = c(1,1),cex=0.8)
str_c("n = ", para$n)
test_label <- str_c("n = ", para$n)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = 4)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)+
ggtitle("Plot of CI over 100 simulations") +
xlab(test_label) + ylab("Teeth length")
test_label <- str_c("n = ", para$n)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = 4)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)+
labs(title="Plot of CI over 100 simulations",
x =test_label, y = "Estimation")
test_label <- str_c("n = ", para$n)
ggplot(data = coverage,aes(x = simulation,y = esti)) +
geom_line()+
geom_hline(yintercept = 4)+
geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3)+
labs(title="Plot of CI over 100 simulations",
x =test_label, y = "Estimation")+
theme(
plot.title = element_text(size=14,hjust = 0.5)
)
result_hy$group <- cut(result_hy$mMSE_HY, breaks=c(quantile(result_hy$mMSE_HY, probs = seq(0, 1, by = 0.20))),include.lowest = T)
heatmap1 <- ggplot(result_hy, aes(h, g,fill = group))
heatmap1 + geom_tile()+
scale_fill_manual(breaks = levels(result_hy$group),
values = c("#86ebc9", "#869ceb",
"#b986eb","#a1eb86","#09855c"))
View(CI)
heatmap2 <- ggplot(result_hy, aes(h, g,fill = cover))
heatmap2 + geom_tile()
heatmap2 <- ggplot(coverage_all, aes(h, g,fill = cover))
heatmap2 + geom_tile()
heatmap2 <- ggplot(coverage_all, aes(h, g, fill = cover))
heatmap2 + geom_tile()+
scale_color_gradient(low = "blue", high = "black")
heatmap2 <- ggplot(coverage_all, aes(h, g, fill = cover))
heatmap2 + geom_tile()+
scale_color_gradient(low = "blue", high = "black")
heatmap2 <- ggplot(coverage_all, aes(h, g, fill = cover))
heatmap2 + geom_tile()+
scale_fill_gradient(low = "blue", high = "black")
heatmap2 <- ggplot(coverage_all, aes(h, g, fill = cover))
heatmap2 + geom_tile()
esti <- train_label$Y
for(i in 1:length(esti)){
esti <- mhat(para$n,para$h,x = train_label$X[i],X = train_label$X,Y = train_label$Y,k)
}
esti - train_label$Y
(esti - train_label$Y)^2
mean((esti - train_label$Y)^2)
esti <- train_label$Y
for(i in 1:length(esti)){
esti <- mhat(para$n,para$h,x = train_label$X[i],X = train_label$X,Y = train_label$Y,k)
}
for(i in 1:length(esti)){
esti[i] <- mhat(para$n,para$h,x = train_label$X[i],X = train_label$X,Y = train_label$Y,k)
}
mean((esti - train_label$Y)^2)
esti
esti <- train_label$Y
esti[1]
esti[2]
for(i in 1:length(esti)){
esti[i] <- mhat(para$n,para$h,x = train_label$X[i],X = train_label$X,Y = train_label$Y,k)
}
mean(esti - train_label$Y)
error_esti <- mean((esti - train_label$Y)^2)
esti_var <- function(n, h, m, g, mx_deriv1, sigmaep, px, qx, rk, sigmak, E_H_ratio = 1){
var <- 1/(n*h*px)*sigmaep^2*rk + (h^4)/(m*g^3*qx)*E_H_ratio*mx_deriv1^2*sigmak
return(var)
}
CI <- function(level,adjust,para,train_label,train_un,test,sigmaep_esti,rk,sigmak,E_H_ratio = 1){
n <- para$n
h <- para$h
m <- para$m
g <- para$g
X <- train_label$X
Y <- train_label$Y
mx_deriv1 <- mhat_1(n,h,test$X,X,Y,k,k_1)
px <- phat(n,h,test$X,X,k)
qx <- phat(m,g,test$X,train_un$X,k)
var_esti <- esti_var(n,h,m,g,mx_deriv1,sigmaep,px,qx,rk,sigmak,E_H_ratio = E_H_ratio)
para$lambda <- 1 + h^2/g^2
nw_esti <- mhat(n, h, test$X, X, Y, k)
ss_esti <- rhat(n, h, test$X, X, Y, k, m, g, train_un$X)
hy_esti <- hy_simu(test, para$lambda, nw_esti, ss_esti)$esti$esti_hy
#browser()
upper <- hy_esti + sqrt(var_esti)*qnorm(1-(1 - level)/2)*adjust
lower <- hy_esti - sqrt(var_esti)*qnorm(1-(1 - level)/2)*adjust
return(data.frame(h = h, g = g, lower, upper, esti = hy_esti, sd = sqrt(var_esti)))
}
esti_error <- function(para,train_label){
esti <- train_label$Y
for(i in 1:length(esti)){
esti[i] <- mhat(para$n,para$h,x = train_label$X[i],X = train_label$X,Y = train_label$Y,k)
}
error_esti <- mean((esti - train_label$Y)^2)
return(error_esti)
}
set.seed(10)
rounds <- 100
hlist <- seq(0.1,1,0.1)
glist <- seq(0.1,2,0.1)
coverage_all <- data.frame()
cover <- 1:rounds
for(i in 1:length(hlist)){
para$h <- hlist[i]
for(j in 1:length(glist)){
para$g <- glist[j]
for(ep in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
temp <- CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep,rk$value,sigmak$value)
cover[ep] <- (temp$lower <= test$Y)*(temp$upper >= test$Y)
}
coverage_all <- rbind(coverage_all,data.frame(h = para$h, g = para$g, cover = mean(cover, na.rm = T)))
}
}
set.seed(30)
para <- paraset_g(128,10/19,rk$value, muk$value)
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
error_esti <- esti_error(para,train_label)
error_esti
set.seed(10)
rounds <- 100
para$h <- 0.25 # result_hy$h[HY_opt]
para$g <- 0.5 # result_hy$g[HY_opt]
coverage <- data.frame()
for(i in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
coverage <- rbind(coverage,CI_1(adjust = 1,0.95,para,train_label,train_un,test,error_esti,rk$value,sigmak$value))
}
coverage$cover <- (coverage$lower <= test$Y)*(coverage$upper >= test$Y)
mean(coverage$cover,na.rm = T)
sigmaep
set.seed(30)
para <- paraset_g(128,10/19,rk$value, muk$value)
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
sigmaep_esti <- sqrt(esti_error(para,train_label))
set.seed(10)
rounds <- 100
hlist <- seq(0.1,1,0.1)
glist <- seq(0.1,2,0.1)
coverage_all <- data.frame()
cover <- 1:rounds
for(i in 1:length(hlist)){
para$h <- hlist[i]
for(j in 1:length(glist)){
para$g <- glist[j]
for(ep in 1:rounds){
data <- simu_norm(para$m + para$n, 1, para$m, meanx = 0, sigmax = sigmax, sigmaep = sigmaep)
train_label <- data[1:para$n,]
train_un <- data[(1+para$n):(para$m+para$n),]
temp <- CI_1(adjust = 1,0.95,para,train_label,train_un,test,sigmaep_esti,rk$value,sigmak$value)
cover[ep] <- (temp$lower <= test$Y)*(temp$upper >= test$Y)
}
coverage_all <- rbind(coverage_all,data.frame(h = para$h, g = para$g, cover = mean(cover, na.rm = T)))
}
}
heatmap2 <- ggplot(coverage_all, aes(h, g, fill = cover))
heatmap2 + geom_tile()
View(para)
px
p(2)
para
32^(10/19)
esti_var(32,0.3,6,6,4,1,0.0736,0.0736,rk,sigmak,E_H_ratio = E_H_ratio)
esti_var(32,0.3,6,6,4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
64^(10/19)
esti_var(64,0.1,8,0.3,4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
32*0.3
64*0.1
0.3^4/(6*6*3)
0.1^4/(8*0.3*3)
rk$value/0.0736
rk$value/0.0736/9.6
rk$value/0.0736/6.4
esti_var(128,0.25,10,0.5,4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
esti_var(128,0.25,10,0.5,4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
esti_var(128,0.25,10,1,4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
esti_var(128,0.25,10,2,4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
esti_var(128,0.25,10,100,4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
para
esti_var(128,0.25,13,13^(-1/5),4,1,0.0736,0.0736,rk$value,sigmak$value, E_H_ratio = 1)
13^(-1/5)
mx_deriv1 <- mhat_1(para$n,para$h,test$X,train_label$X,train_label$Y,k,k_1)
(sigmaep_esti^2*rk$value/(4*mx_deriv1^2*sigmak$value))^(1/5)*para$m^(2/25)*para$n^(-1/5)
70+20/3+25/12
325-200
125/15
325/5
plot(a,x4,type = "l",col = 2)
a <- seq(0,50,1)
x4 <- 325-15/2*a
x2 <- 5/2*a + 25
x1 <- 5*a-150
plot(a,x4,type = "l",col = 2)
lines(a,x2,col = 3)
lines(a,x1,col = 4)
#Sec
x4 <- (a<10)*200+(a>=10)*(a<50/3)*(250-5*a)+(a>=50/3)*(325-15/2*a)
x2 <- (a>=10)*(a<50/3)*(5*a-50)+(a>=50/3)*(5/2*a+25)
x1 <- (a>=50/3)*(5*a-150)
plot(a,x4,type = "l",col = 2)
lines(a,x2,col = 3)
lines(a,x1,col = 4)
#Sec
x4 <- (a<10)*200+(a>=10)*(a<30)*(250-5*a)+(a>=30)*(325-15/2*a)
x2 <- (a>=10)*(a<30)*(5*a-50)+(a>=30)*(5/2*a+25)
x1 <- (a>=30)*(5*a-150)
plot(a,x4,type = "l",col = 2)
lines(a,x2,col = 3)
lines(a,x1,col = 4)
legend("bottomright", legend = routes,col=2:4, cex=0.75, text.font = 0.1)
routes <- c('R1','R2','R3','R4')
legend("bottomright", legend = routes,col=2:4, cex=0.75, text.font = 0.1)
legend("bottomright", legend = routes,col=2:4, cex=0.5, text.font = 0.1)
legend("bottomright", legend = routes, col=2:4,pwd = 1, cex=0.5, text.font = 0.1)
?plot
legend("bottomright", legend = routes, col=2:4,pch = 1, cex=0.5, text.font = 0.1)
legend("bottomright", legend = routes, col=2:4, lty = 1, cex=0.5, text.font = 0.1)
legend("bottomleft", legend = routes, col=2:4, lty = 1, cex=0.5, text.font = 0.1)
#Sec
x4 <- (a<10)*200+(a>=10)*(a<30)*(250-5*a)+(a>=30)*(325-15/2*a)
x2 <- (a>=10)*(a<30)*(5*a-50)+(a>=30)*(5/2*a+25)
x1 <- (a>=30)*(5*a-150)
plot(a,x4,type = "l",col = 2)
lines(a,x2,col = 3)
lines(a,x1,col = 4)
legend("bottomleft", legend = routes, col=2:4, lty = 1, cex=0.5, text.font = 0.1)
#Sec
x4 <- (a<10)*200+(a>=10)*(a<30)*(250-5*a)+(a>=30)*(a<130/3)*(325-15/2*a)
x2 <- (a>=10)*(a<30)*(5*a-50)+(a>=30)*(a<130/3)*(5/2*a+25)+(a>=130/3)*400/3
x1 <- (a>=30)*(a<130/3)*(5*a-150)+(a>=130/3)*200/3
plot(a,x4,type = "l",col = 2)
lines(a,x2,col = 3)
lines(a,x1,col = 4)
legend("bottomleft", legend = routes, col=2:4, lty = 1, cex=0.5, text.font = 0.1)
